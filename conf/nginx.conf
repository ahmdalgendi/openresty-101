worker_processes 1;

error_log logs/error.log error;

events {
    worker_connections 512;
}

http {
    init_by_lua_block {
        require "hello_m"
        require "resty.redis"

    }
    lua_package_path "$prefix/lua/?.lua;;";
    server {
        listen 8080 reuseport;
        location / {
            default_type text/plain;
            content_by_lua_block {
                local hello = require"hello_m";
                hello.greet("KIK")
            }
        }

        location /asuna {
            default_type text/plain;
            content_by_lua_block {
                local hello = require"hello_m";
                hello.greet("mewo");
                hello.greet("lol");
            }
        }

        location = /request_body {
            client_max_body_size 50k;
            client_body_buffer_size 50k;

            content_by_lua_block {
                ngx.req.read_body() -- explicitly read the req body
                local data = ngx.req.get_body_data()
                if data then
                ngx.say("body data:")
                ngx.print(data)
                return
                end

                -- body may get buffered in a temp file:
                local file = ngx.req.get_body_file()
                if file then
                ngx.say("body is in file ", file)
                else
                ngx.say("no body found")
                end
            }
        }

        location = /post {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                local ok, err = ngx.say( ngx.req.get_method())
                local method = ngx.req.get_method()
                if method ~= "POST" then
                local ok, err = ngx.say(method , " : is not supported for this route")
                return
                end
                red:set_timeouts(1000, 1000, 1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                -- local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                ngx.say("failed to connect: ", err)
                return
                end

                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()

                if err == "truncated" then
                -- one can choose to ignore or reject the current request here
                return
                end

                if not args then
                ngx.say("failed to get post args: ", err)
                return
                end
                for key, val in pairs(args) do
                if type(val) == "table" then
                ngx.say("is array")
                ngx.say(key, ": ", table.concat(val, ", "))
                else
                ngx.say(key, ": ", val)

                ok, err = red:set(key, val)
                if not ok then
                ngx.say("failed to set" , key , err)
                return
                end

                end
                end


            }
        }

        location /get {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                local method = ngx.req.get_method()
                if method ~= "GET" then
                local ok, err = ngx.say(method , " : is not supported for this route")
                return
                end
                red:set_timeouts(1000, 1000, 1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                -- local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                ngx.say("failed to connect: ", err)
                return
                end
                local args, err = ngx.req.get_uri_args()

                if err == "truncated" then
                -- one can choose to ignore or reject the current request here
                end

                for key, val in pairs(args) do
                if type(val) == "table" then
                ngx.say(key, ": ", table.concat(val, ", "))
                else

                ok, err = red:get(key)
                if not ok then
                ngx.say("failed to get" , key , err)
                return
                end
                ngx.say(key , " is found and has a value of: " , ok)

                end
                end


            }
        }

    }

}